#!/usr/bin/env python
# -*- coding: utf-8 -*-

############################################
#                                          #
# Simple log visualizer for pdelay         #
#                                          #
# Written by Taylor Shin                   #
#                                          #
# Jan. 11th 2017                           #
#                                          #
############################################

#import os
import re
import sys
#import numpy as np
import matplotlib.mlab as mlab
import matplotlib.pyplot as plt


def show_usage():
    print("log_vis V 0.0.1 usage:")
    print("log_vis.py <some log text file generated by pdelay 0.0.1>")
    print("Sqlite3 log visualization has not been implemented yet...")


def get_time_from_matched_str(matched_str):
    if not matched_str:
        print(matched_str, "is not valid for time str to dbl conversion")
        sys.exit(0)

    numeric_pt, unit_pt = matched_str.split(" ")

    num = float(numeric_pt)

    multiplier = 1.0
    if unit_pt == 'ps':
        multiplier = 1e-12
    elif unit_pt == 'ns':
        multiplier = 1e-9
    elif unit_pt == 'us':
        multiplier = 1e-6
    elif unit_pt == 'ms':
        multiplier = 1e-3
    elif multiplier == 's':
        multiplier = 1.0
    else:
        multiplier = 1.0

    return num * multiplier


def main():
    # Shows usage if no other input has given
    if len(sys.argv) is 1:
        show_usage()
        sys.exit(0)

    # Read in given logfile
    logfile = sys.argv[1]

    # pattern matching preparation.
    data_store = {}
    with open(logfile, 'r') as fp:
        logfile_lines = fp.readlines()
        for ll in logfile_lines:
            # read in time
            time_matched = re.search(r"\[[+-]?\d+(?:\.\d+)?\s[a-z]+\]", ll)
            if time_matched:
                time = get_time_from_matched_str(time_matched.group(0)[1:-1])
            else:
                time = None

            # Now extract carrier data from the line
            index = int(re.search(r"\[([0-9]+)\]", ll).group(0)[1:-1])
            ctype = re.search(r"\][A-Za-z]+\s", ll).group(0)[1:-1]
            coord_str = re.search(r"\([-+]?(\d+(\.\d*)?|\.\d+)([eE][-+]?\d+)?\,\s[-+]?(\d+(\.\d*)?|\.\d+)([eE][-+]?\d+)?\,\s[-+]?(\d+(\.\d*)?|\.\d+)([eE][-+]?\d+)?\)", ll).group(0)[1:-1].split(", ")
            coord = (coord_str[0], coord_str[1], coord_str[2])
            carr_data = [index, ctype, coord]

            if time in data_store.keys():
                data_store[time].append(carr_data)
            else:
                data_store[time] = [carr_data]

    # Ok, we've populated data_store... let's plot something
    #
    # convert data_store to simple x, y data
    #
    time_list = sorted(data_store.keys())
    carr_cnt_hole = []
    carr_cnt_elec = []
    for tl in time_list:
        carr_list = data_store[tl]
        hole_cnt = 0
        elec_cnt = 0
        for carr in carr_list:
            if carr[1].lower() == 'hole':
                hole_cnt += 1
            elif carr[1].lower() == 'electron':
                elec_cnt += 1

        carr_cnt_hole.append(hole_cnt)
        carr_cnt_elec.append(elec_cnt)

    plt.figure()
    plt.plot(time_list, carr_cnt_hole, 'b--', linewidth=2, label='Holes')
    plt.plot(time_list, carr_cnt_elec, 'r--', linewidth=2, label='Electrons')
    plt.xlabel('time (s)')
    plt.title('Carrier collection histogram from ... %s' % logfile)
    plt.grid(True)
    plt.axis([0, max(time_list), 0, max(carr_cnt_hole+carr_cnt_elec)])
    plt.legend(loc='best')
    plt.show()

if __name__ == "__main__":
    main()
